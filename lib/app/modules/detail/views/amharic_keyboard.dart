import 'package:bible_book_app/app/modules/detail/controllers/detail_controller.dart';
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:get/get.dart';
import 'package:sizer/sizer.dart';

class AmharicLetter {
  final String basicForm;
  final List<String> forms;

  AmharicLetter(this.basicForm, this.forms);
}

final DetailController detailController = Get.find();

class AmharicKeyboard extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GetBuilder<DetailController>(
      init: DetailController(),
      initState: (_) {},
      builder: (_) {
        return Padding(
          padding: const EdgeInsets.symmetric(vertical: 20),
          child: Container(
            color: Colors.grey[200],
            padding: const EdgeInsets.all(0.0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Visibility(
                  visible: detailController
                          .selectedAmharicLetter?.forms.isNotEmpty ??
                      false,
                  child: SizedBox(
                    height:
                        SizerUtil.deviceType == DeviceType.mobile ? 55 : 6.4.h,
                    child: GridView.builder(
                      padding: const EdgeInsets.symmetric(
                          vertical: 2, horizontal: 3),
                      shrinkWrap: true,
                      physics: const NeverScrollableScrollPhysics(),
                      itemCount:
                          detailController.selectedAmharicLetter?.forms.length,
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount:
                            detailController.selectedAmharicLetter?.basicForm ==
                                    '0'
                                ? 10
                                : 7,
                        mainAxisSpacing: 4.0, // Adjust the spacing here
                        crossAxisSpacing: 4.0, // Adjust the spacing here
                      ),
                      itemBuilder: (context, index) {
                        final key = detailController
                            .selectedAmharicLetter?.forms[index];
                        return InkWell(
                          onTap: () {
                            bool isFirstForm = false;
                            int currentlySelectedKeyIndex =
                                _keyboardRows.indexOf(
                                    detailController.selectedAmharicLetter!);
                            AmharicLetter letter =
                                _keyboardRows[currentlySelectedKeyIndex];
                            List<String> inputValues = detailController
                                .searchController.text
                                .split('');
                            if (inputValues.isNotEmpty) {
                              if (letter.basicForm ==
                                  inputValues[inputValues.length - 1]) {
                                isFirstForm = true;
                              }

                              if (isFirstForm == true) {
                                inputValues[inputValues.length - 1] = key!;
                                String inputValue = inputValues.join();
                                detailController.searchController.text =
                                    inputValue;
                                detailController.update();
                              } else {
                                detailController.onKeyPressed(key!);
                              }
                            }
                          },
                          child: Container(
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(4.0),
                            ),
                            alignment: Alignment.center,
                            child: Text(
                              key ?? "",
                              style: const TextStyle(fontSize: 16.0),
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                ),
                SizedBox(
                  height:
                      SizerUtil.deviceType == DeviceType.mobile ? 26.h : 21.h,
                  child: Wrap(
                    spacing: SizerUtil.deviceType == DeviceType.mobile
                        ? 4.0
                        : 4.0, // Adjust the spacing here
                    runSpacing: SizerUtil.deviceType == DeviceType.mobile
                        ? 4.0
                        : 4.0, // Adjust the run spacing here
                    children: _keyboardRows.map((key) {
                      return SizedBox(
                        width: SizerUtil.deviceType == DeviceType.mobile
                            ? key.basicForm == '‚Äï'
                                ? 98.sp
                                : 31.sp
                            : key.basicForm == '‚Äï'
                                ? 76.sp
                                : 24.sp,
                        height: 40,
                        child: InkWell(
                          onTap: () async {
                            if (key.basicForm == "EN") {
                              detailController.openEnglishKeyboard();
                              FocusScope.of(context)
                                  .requestFocus(detailController.focusNode);
                            } else if (key.basicForm == '‚Üê') {
                              detailController.onBackSpaceKeyPressed();
                            } else if (key.basicForm == 'üîé') {
                              if (detailController
                                  .searchController.text.isNotEmpty) {
                                await EasyLoading.show(
                                    status: 'Searching Please Wait...');
                                detailController.searchResultVerses =
                                    await detailController.search(
                                        BibleType: detailController
                                            .selectedBookTypeOptions,
                                        searchType: detailController
                                            .selectedSearchTypeOptions,
                                        searchPlace: detailController
                                            .selectedSearchPlaceOptions,
                                        query: detailController
                                            .searchController.text);
                                detailController.isAmharicKeyboardVisible =
                                    false;

                                EasyLoading.dismiss();
                                detailController.update();
                              }
                            } else if (key.basicForm == '‚Üì') {
                              detailController.makeAmharicKeyboardInVisible();
                            } else if (key.basicForm == '‚Äï') {
                              detailController.onKeyPressed(" ");
                            } else if (key.basicForm == '@') {
                              detailController.onKeyPressed(key.basicForm);
                            } else {
                              detailController.setSelectedAmharicLetter(key);
                              detailController.onKeyPressed(key.basicForm);
                            }
                          },
                          child: Container(
                            padding: const EdgeInsets.all(8.0),
                            decoration: BoxDecoration(
                              color: Colors.white,
                              borderRadius: BorderRadius.circular(4.0),
                            ),
                            alignment: Alignment.center,
                            child: Text(
                              key.basicForm,
                              style: const TextStyle(fontSize: 16.0),
                            ),
                          ),
                        ),
                      );
                    }).toList(),
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

final List<AmharicLetter> _keyboardRows = [
  AmharicLetter('·àÄ', ['·àÄ', '·àÅ', '·àÇ', '·àÉ', '·àÑ', '·àÖ', '·àÜ']),
  AmharicLetter('·àà', ['·àà', '·àâ', '·àä', '·àã', '·àå', '·àç', '·àé']),
  AmharicLetter('·àê', ['·àê', '·àë', '·àí', '·àì', '·àî', '·àï', '·àñ']),
  AmharicLetter('·àò', ['·àò', '·àô', '·àö', '·àõ', '·àú', '·àù', '·àû']),
  AmharicLetter('·à†', ['·à†', '·à°', '·à¢', '·à£', '·à§', '·à•', '·à¶']),
  AmharicLetter('·à®', ['·à®', '·à©', '·à™', '·à´', '·à¨', '·à≠', '·àÆ']),
  AmharicLetter('·à∞', ['·à∞', '·à±', '·à≤', '·à≥', '·à¥', '·àµ', '·à∂']),
  AmharicLetter('·à∏', ['·à∏', '·àπ', '·à∫', '·àª', '·àº', '·àΩ', '·àæ']),
  AmharicLetter('·âÄ', ['·âÄ', '·âÅ', '·âÇ', '·âÉ', '·âÑ', '·âÖ', '·âÜ']),
  AmharicLetter('·â†', ['·â†', '·â°', '·â¢', '·â£', '·â§', '·â•', '·â¶']),
  AmharicLetter('·â∞', ['·â∞', '·â±', '·â≤', '·â≥', '·â¥', '·âµ', '·â∂']),
  AmharicLetter('·â∏', ['·â∏', '·âπ', '·â∫', '·âª', '·âº', '·âΩ', '·âæ']),
  AmharicLetter('·äÄ', ['·äÄ', '·äÅ', '·äÇ', '·äÉ', '·äÑ', '·äÖ', '·äÜ']),
  AmharicLetter('·äê', ['·äê', '·äë', '·äí', '·äì', '·äî', '·äï', '·äñ']),
  AmharicLetter('·äò', ['·äò', '·äô', '·äö', '·äõ', '·äú', '·äù', '·äû']),
  AmharicLetter('·ä†', ['·ä†', '·ä°', '·ä¢', '·ä£', '·ä§', '·ä•', '·ä¶']),
  AmharicLetter('·ä®', ['·ä®', '·ä©', '·ä™', '·ä´', '·ä¨', '·ä≠', '·äÆ']),
  AmharicLetter('·ä∏', ['·ä∏', '·äπ', '·ä∫', '·äª', '·äº', '·äΩ', '·äæ']),
  AmharicLetter('·ãà', ['·ãà', '·ãâ', '·ãä', '·ãã', '·ãå', '·ãç', '·ãé']),
  AmharicLetter('·ãê', ['·ãê', '·ãë', '·ãí', '·ãì', '·ãî', '·ãï', '·ãñ']),
  AmharicLetter('·ãò', ['·ãò', '·ãô', '·ãö', '·ãõ', '·ãú', '·ãù', '·ãû']),
  AmharicLetter('·ã†', ['·ã†', '·ã°', '·ã¢', '·ã£', '·ã§', '·ã•', '·ã¶']),
  AmharicLetter('·ã®', ['·ã®', '·ã©', '·ã™', '·ã´', '·ã¨', '·ã≠', '·ãÆ']),
  AmharicLetter('·ã∞', ['·ã∞', '·ã±', '·ã≤', '·ã≥', '·ã¥', '·ãµ', '·ã∂']),
  AmharicLetter('·åÄ', ['·åÄ', '·åÅ', '·åÇ', '·åÉ', '·åÑ', '·åÖ', '·åÜ']),
  AmharicLetter('·åà', ['·åà', '·åâ', '·åä', '·åã', '·åå', '·åç', '·åé']),
  AmharicLetter('·å†', ['·å†', '·å°', '·å¢', '·å£', '·å§', '·å•', '·å¶']),
  AmharicLetter('·å®', ['·å®', '·å©', '·å™', '·å´', '·å¨', '·å≠', '·åÆ']),
  AmharicLetter('·å∞', ['·å∞', '·å±', '·å≤', '·å≥', '·å¥', '·åµ', '·å∂']),
  AmharicLetter('·å∏', ['·å∏', '·åπ', '·å∫', '·åª', '·åº', '·åΩ', '·åæ']),
  AmharicLetter('·çÄ', ['·çÄ', '·çÅ', '·çÇ', '·çÉ', '·çÑ', '·çÖ', '·çÜ']),
  AmharicLetter('·çà', ['·çà', '·çâ', '·çä', '·çã', '·çå', '·çç', '·çé']),
  AmharicLetter('·çê', ['·çê', '·çë', '·çí', '·çì', '·çî', '·çï', '·çñ']),
  AmharicLetter('EN', []),
  AmharicLetter('‚Äï', []),
  AmharicLetter('‚Üê', []),
  AmharicLetter('‚Üì', []),
  AmharicLetter('üîé', []),
];
